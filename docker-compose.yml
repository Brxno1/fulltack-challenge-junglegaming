services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
    ports:
      - '3000:3000'
    volumes:
      - .:/challenge
      - ./packages:/challenge/packages
      - /challenge/node_modules
      - /challenge/apps/web/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=1
    networks:
      - challenge-network
    restart: unless-stopped
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    ports:
      - '3001:3001'
    volumes:
      - .:/challenge
      - ./packages:/challenge/packages
      - /challenge/node_modules
      - /challenge/apps/api-gateway/node_modules
    environment:
      - NODE_ENV=development
      - API_GATEWAY_PORT=3001
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - TASKS_SERVICE_URL=${TASKS_SERVICE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - CHOKIDAR_USEPOLLING=1
    env_file:
      - ./.env
    depends_on:
      auth-service:
        condition: service_started
      tasks-service:
        condition: service_started
    networks:
      - challenge-network
    restart: unless-stopped

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: development
    ports:
      - '3002:3002'
    volumes:
      - .:/challenge
      - ./packages:/challenge/packages
      - /challenge/node_modules
      - /challenge/apps/auth-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - CHOKIDAR_USEPOLLING=1
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_started
    networks:
      - challenge-network
    restart: unless-stopped

  tasks-service:
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile
      target: development
    ports:
      - '3003:3003'
    volumes:
      - .:/challenge
      - ./packages:/challenge/packages
      - /challenge/node_modules
      - /challenge/apps/tasks-service/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CHOKIDAR_USEPOLLING=1
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - challenge-network
    restart: unless-stopped

  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    ports:
      - '5432:5432'
    networks:
      - challenge-network
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file:
      - ./.env

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - challenge-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-admin}
    env_file:
      - ./.env
    volumes: ['rabbitmq_data:/var/lib/rabbitmq']

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  challenge-network:
    driver: bridge
